import numpy as np
import skfuzzy as fuzz
from matplotlib import rcParams
rcParams['font.family']='DejaVu Serif'
rcParams['font.size']=24
import matplotlib.pyplot as plt
from matplotlib.pyplot import MultipleLocator
from matplotlib.backends.backend_pdf import PdfPages

# Generate universe variables
#   * Quality and service on subjective ranges [0, 10]
#   * Tip has a range of [0, 25] in units of percentage points
# numSample = np.arange(0, 1, 0.02)
# # Generate fuzzy membership functions
# numSample_shortage = fuzz.gaussmf(numSample, 0, 0.14)
# numSample_middle = fuzz.gaussmf(numSample, 0.718, 0.14)
# numSample_sufficient = fuzz.gaussmf(numSample, 1, 0.14)
#
# #rcParams['figure.figsize'] = 8,3
# # fig, (ax0, ax1, ax2, ax3) = plt.subplots(nrows=1, ncols=4)
# # ax0 = plt.subplot(321)
# ax0 = plt.subplot(111)
# ax0.plot(numSample, numSample_shortage, 'b', linewidth=1.5, label='Shortage')
# ax0.plot(numSample, numSample_middle, 'g', linewidth=1.5, label='Average')
# ax0.plot(numSample, numSample_sufficient, 'r', linewidth=1.5, label='Sufficient')
# ax0.vlines(0.718, 0, 1, colors="black", linewidth=1, linestyles="dashed")
# # plt.text(-4.8, 0.11, '$\overline{Mean}$')
# #ax0.set_title('(a)')
# ax0.set_xlabel('Normalized samples quantity')
# ax0.set_ylabel('Membership')
# #ax0.yaxis.set_major_locator(MultipleLocator(0.5))
# ax0.spines['top'].set_visible(False)
# ax0.spines['right'].set_visible(False)
# ax0.get_xaxis().tick_bottom()
# ax0.get_yaxis().tick_left()
# # plt.text(0.45, -0.6, '(a)')
# ax0.legend()
# #plt.show()
#
# # plt.savefig('numSample.pdf')
# # plt.figure(figsize=(3,2))
# Bandwidth = np.arange(0, 1, 0.001)
# bandwidth_poor = fuzz.gaussmf(Bandwidth, 0, 0.21)
# bandwidth_middle = fuzz.gaussmf(Bandwidth, 0.263, 0.21)
# bandwidth_good = fuzz.gaussmf(Bandwidth, 1, 0.21)
#
# # ax1 = plt.subplot(322)
# ax1 = plt.subplot(111)
# ax1.plot(Bandwidth, bandwidth_poor, 'b', linewidth=1.5, label='Poor')
# ax1.plot(Bandwidth, bandwidth_middle, 'g', linewidth=1.5, label='Middle')
# ax1.plot(Bandwidth, bandwidth_good, 'r', linewidth=1.5, label='Good')
# ax1.vlines(0.263, 0, 1, colors="black", linewidth=1, linestyles="dashed")
# # plt.text(0.25, -0.11, '$\overline{Mean}$')
# # ax1.set_title('(b)')
# ax1.set_xlabel('Normalized available throughput')
# ax1.set_ylabel('Membership')
# ax1.spines['top'].set_visible(False)
# ax1.spines['right'].set_visible(False)
# ax1.get_xaxis().tick_bottom()
# ax1.get_yaxis().tick_left()
# ax1.legend()
# # plt.text(0.45, -0.6, '(b)')

# # plt.savefig('Bandwidth.pdf')
#
# # plt.figure(figsize=(3,2))
# # ax2 = plt.subplot(323)
# ax2 = plt.subplot(111)
# computingPower = np.arange(0, 1, 0.001)
# computingPower_weak = fuzz.gaussmf(computingPower, 0.2, 0.25)
# computingPower_middle = fuzz.gaussmf(computingPower, 0.6, 0.25)
# computingPower_strong = fuzz.gaussmf(computingPower, 1, 0.25)
# # fig, ax2 = plt.subplots(nrows=1)
# ax2.plot(computingPower, computingPower_weak, 'b', linewidth=1.5, label='Weak')
# ax2.plot(computingPower, computingPower_middle, 'g', linewidth=1.5, label='Middle')
# ax2.plot(computingPower, computingPower_strong, 'r', linewidth=1.5, label='Strong')
# # ax2.vlines(0.263, 0, 1, colors="black", linewidth=0.5, linestyles="dashed")
# # plt.text(0.263, -0.1, '$\overline{m}$')
# # ax2.set_title('(c)')
# ax2.set_xlabel('Normalized computational capability')
# ax2.vlines(0.6, 0, 1, colors="black", linewidth=1, linestyles="dashed")
# ax2.set_ylabel('Membership')
# ax2.spines['top'].set_visible(False)
# ax2.spines['right'].set_visible(False)
# ax2.get_xaxis().tick_bottom()
# ax2.get_yaxis().tick_left()
# ax2.legend()
# # plt.text(0.45, -0.6, '(c)')
# # plt.figure(figsize=(3,2))
# # plt.savefig('computationalPower.pdf')

#
# ax3 = plt.subplot(324)
ax3 = plt.subplot(111)
numUse = np.arange(0, 1, 0.001)
numUse_two = fuzz.gaussmf(numUse, 0.6, 0.2)
numUse_one = fuzz.gaussmf(numUse, 0.8, 0.2)
numUse_unused = fuzz.gaussmf(numUse, 1, 0.2)
ax3.plot(numUse, numUse_two, 'b', linewidth=1.5, label='Frequent')
ax3.plot(numUse, numUse_one, 'g', linewidth=1.5, label='Several')
ax3.plot(numUse, numUse_unused, 'r', linewidth=1.5, label='Less')
# ax3.vlines(0.263, 0, 1, colors="black", linewidth=0.5, linestyles="dashed")
# plt.text(0.263, -0.1, '$\overline{m}$')
# ax3.set_title('(d)')
ax3.set_xlabel('Normalized samples freshness')
ax3.vlines(0.8, 0, 1, colors="black", linewidth=1, linestyles="dashed")
ax3.set_ylabel('Membership')
ax3.spines['top'].set_visible(False)
ax3.spines['right'].set_visible(False)
ax3.get_xaxis().tick_bottom()
ax3.get_yaxis().tick_left()
ax3.legend()
# plt.text(0.45, -0.6, '(d)')
# plt.figure(figsize=(3,2.4))
# plt.savefig('timesSelectedClient.pdf')

#
# # ax4 = plt.subplot(325)
# ax4 = plt.subplot(111)
# Score = np.arange(0, 1, 0.001)
# Score_l0 = fuzz.gaussmf(Score, 0, 0.0625)
# Score_l1 = fuzz.gaussmf(Score, 0.125, 0.0625)
# Score_l2 = fuzz.gaussmf(Score, 0.25, 0.0625)
# Score_l3 = fuzz.gaussmf(Score, 0.375, 0.0625)
# Score_l4 = fuzz.gaussmf(Score, 0.5, 0.0625)
# Score_l5 = fuzz.gaussmf(Score, 0.625, 0.0625)
# Score_l6 = fuzz.gaussmf(Score, 0.75, 0.0625)
# Score_l7 = fuzz.gaussmf(Score, 0.875, 0.0625)
# Score_l8 = fuzz.gaussmf(Score, 1, 0.0625)
# ax4.plot(Score, Score_l0, linewidth=1.5, label='L0')
# ax4.plot(Score, Score_l1, linewidth=1.5, label='L1')
# ax4.plot(Score, Score_l2, linewidth=1.5, label='L2')
# ax4.plot(Score, Score_l3, linewidth=1.5, label='L3')
# ax4.plot(Score, Score_l4, linewidth=1.5, label='L4')
# ax4.plot(Score, Score_l5, linewidth=1.5, label='L5')
# ax4.plot(Score, Score_l6, linewidth=1.5, label='L6')
# ax4.plot(Score, Score_l7, linewidth=1.5, label='L7')
# ax4.plot(Score, Score_l8, linewidth=1.5, label='L8')
# plt.text(-0.02, 1.04, '${L0}$')
# plt.text(0.12, 1.04, '${L1}$')
# plt.text(0.24, 1.04, '${L2}$')
# plt.text(0.36, 1.04, '${L3}$')
# plt.text(0.48, 1.04, '${L4}$')
# plt.text(0.6, 1.04, '${L5}$')
# plt.text(0.72, 1.04, '${L6}$')
# plt.text(0.84, 1.04, '${L7}$')
# plt.text(0.96, 1.04, '${L8}$')
# # ax3.vlines(0.263, 0, 1, colors="black", linewidth=0.5, linestyles="dashed")
# # plt.text(0.263, -0.1, '$\overline{m}$')
# #ax4.set_title('(e)')
# ax4.set_xlabel('Score')
# ax4.set_ylabel('Membership')
# ax4.spines['top'].set_visible(False)
# ax4.spines['right'].set_visible(False)
# ax4.get_xaxis().tick_bottom()
# ax4.get_yaxis().tick_left()
#
# ax4.legend(labels=[])
# ax4.legend_.remove()
# # Turn off top/right axes
# # plt.text(0.45, -0.6, '(e)')
# # plt.figure(figsize=(3,2.4))
# #plt.savefig('Score.pdf')


plt.tight_layout()
# plt.subplots_adjust(wspace=0.2, hspace=0.7)
plt.show()

# plt.savefig('membership.pdf')